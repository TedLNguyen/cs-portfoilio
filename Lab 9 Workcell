double Magnet5_duration = 500.0;
int Brain_precision = 0, Console_precision = 0;

float myVariable;

event message1 = event();

// "when started" hat block
int whenStarted1() {
  RoboticArm1.setMasteringValues(1843.0,2130.0,1925.0,492.0);
  RoboticArm1.setToolTipOffset(-0.7, 0.0, -2.0);
  Magnet5_duration = 1000;
  Magnet5.setPower(100.0);
  EntryMotor.setVelocity(70.0, percent);
  TransportMotor.setVelocity(15.0, percent);
  ExitMotor.setVelocity(50.0, percent);
  DiverterMotor.setVelocity(30.0, percent);
  DiverterMotor.spinToPosition(90.0, degrees, true);
  EntryMotor.spin(forward);
  wait(2.0, seconds);
  EntryMotor.stop();
  TransportMotor.spin(forward);
  wait(6.0, seconds);
  TransportMotor.stop();
  ExitMotor.spin(forward);
  wait(2.0, seconds);
  ExitMotor.stop();
  EntryMotor.spin(forward);
  wait(2.0, seconds);
  EntryMotor.stop();
  DiverterMotor.spinToPosition(0.0, degrees, true);
  TransportMotor.spin(forward);
  wait(6.0, seconds);
  TransportMotor.stop();
  return 0;
}

// "when EStop pressed" hat block
void onevent_EStop_pressed_0() {
  RoboticArm1.emergencyStop();
}

// "when started" hat block
int whenStarted2() {
  Brain.Screen.setFont(mono60);
  Brain_precision = 3;
  while (true) {
    Brain.Screen.clearScreen();
    // Display the X position on row 1
    Brain.Screen.setCursor(1, 1);
    Brain.Screen.print("X:");
    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(xaxis)));
    Brain.Screen.newLine();
    // Display the Y position on row 2
    Brain.Screen.print("Y:");
    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(yaxis)));
    Brain.Screen.newLine();
    // Display the Z position on row 3
    Brain.Screen.print("Z:");
    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(zaxis)));
    wait(0.2, seconds);
  wait(5, msec);
  }
  return 0;
}


int main() {
  // register event handlers
  EStop.pressed(onevent_EStop_pressed_0);

  wait(15, msec);
  // post event registration

  // set default print color to black
  printf("\033[30m");

  // wait for rotation sensor to fully initialize
  wait(30, msec);

  vex::task ws1(whenStarted2);
  whenStarted1();
}
